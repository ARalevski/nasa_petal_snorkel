# -*- coding: utf-8 -*-
"""Petal_snorkel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tZDTZ_1lPCEvH4zv0c4ewzSAod9nCOFg
"""

# from snorkel.labeling import LabelingFunction
# from snorkel.labeling import labeling_function
from snorkel.labeling.model import LabelModel
from snorkel.labeling import PandasLFApplier
from snorkel.labeling import LFAnalysis
# from snorkel.analysis import get_label_buckets
from snorkel.labeling.model import MajorityLabelVoter
from snorkel.labeling import filter_unlabeled_dataframe
import pickle, os

#import csv file and load train/test/split of dataset
from utils import load_dataset
df_train, df_test = load_dataset()
# df_train = df_train.fillna("")
Y_test = df_test.label.values

#get lfs
from snorkel_paht import *
labeling_function_list = create_labeling_functions(r'./biomimicry_functions_enumerated.csv', r'./biomimicry_function_rules.csv')

len(labeling_function_list)

if not os.path.exists('lf_analysis.pickle'):
    applier = PandasLFApplier(lfs=labeling_function_list)
    # define train and test sets
    L_train = applier.apply(df=df_train)
    L_test = applier.apply(df=df_test)

    df = LFAnalysis(L=L_train, lfs=labeling_function_list).lf_summary()
    with open('lf_analysis.pickle','wb') as f:
        pickle.dump({"lf_analysis":df, 'L_train':L_train,'L_test':L_test},f)

if os.path.exists('lf_analysis.pickle'):
    with open('lf_analysis.pickle','rb') as f:
        data = pickle.load(f)
        lf_analysis = data['lf_analysis']
        L_train = data['L_train']
        L_test = data['L_test']

# buckets = get_label_buckets(L_train[:, 0], L_train[:, 1])
# df_train.iloc[buckets[(ABSTAIN, SPAM)]].sample(10, random_state=1)

majority_model = MajorityLabelVoter()
preds_train = majority_model.predict(L=L_train)

label_model = LabelModel(cardinality=3, verbose=True, device='gpu')
label_model.fit(L_train=L_train, n_epochs=500, log_freq=100, seed=123)

# L_train

# L_test

# Y_test

# majority_acc = majority_model.score(L=L_test, Y=Y_test, tie_break_policy="random")[
#     "accuracy"
# ]

# print(f"{'Majority Vote Accuracy:':<25} {majority_acc * 100:.1f}%")

# label_model_acc = label_model.score(L=L_test, Y=Y_test, tie_break_policy="random")[
#      "accuracy"
#  ]

# print(f"{'Label Model Accuracy:':<25} {label_model_acc * 100:.1f}%")

LFAnalysis(L=L_train, lfs=labeling_function_list).lf_summary()

df_train_filtered, preds_train_filtered = filter_unlabeled_dataframe(
    X=df_train, y=preds_train, L=L_train)

df_train["label"] = label_model.predict(L=L_train, tie_break_policy="abstain")

label_model.save("snorkel_model.pkl")

df_train.to_csv("results.csv")